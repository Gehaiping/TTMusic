package cn.ucai.ttmusic.model.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MUSIC".
*/
public class MusicDao extends AbstractDao<Music, Long> {

    public static final String TABLENAME = "MUSIC";

    /**
     * Properties of entity Music.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SongId = new Property(1, int.class, "songId", false, "SONG_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "SONG_TITLE");
        public final static Property Singer = new Property(3, String.class, "singer", false, "SONG_SINGER");
        public final static Property Album = new Property(4, String.class, "album", false, "SONG_ALBUM");
        public final static Property Url = new Property(5, String.class, "url", false, "SONG_URL");
        public final static Property Size = new Property(6, long.class, "size", false, "SONG_SIZE");
        public final static Property Time = new Property(7, long.class, "time", false, "SONG_TIME");
        public final static Property Name = new Property(8, String.class, "name", false, "SONG_NAME");
        public final static Property IsCollected = new Property(9, int.class, "isCollected", false, "IS_COLLECTED");
        public final static Property CollectTime = new Property(10, long.class, "collectTime", false, "CollectTime");
        public final static Property ListName = new Property(11, String.class, "listName", false, "LIST_NAME");
        public final static Property AddTime = new Property(12, long.class, "addTime", false, "ADD_TIME");
    }


    public MusicDao(DaoConfig config) {
        super(config);
    }
    
    public MusicDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MUSIC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SONG_ID\" INTEGER NOT NULL UNIQUE ," + // 1: songId
                "\"SONG_TITLE\" TEXT," + // 2: title
                "\"SONG_SINGER\" TEXT," + // 3: singer
                "\"SONG_ALBUM\" TEXT," + // 4: album
                "\"SONG_URL\" TEXT," + // 5: url
                "\"SONG_SIZE\" INTEGER NOT NULL ," + // 6: size
                "\"SONG_TIME\" INTEGER NOT NULL ," + // 7: time
                "\"SONG_NAME\" TEXT," + // 8: name
                "\"IS_COLLECTED\" INTEGER NOT NULL ," + // 9: isCollected
                "\"CollectTime\" INTEGER NOT NULL ," + // 10: collectTime
                "\"LIST_NAME\" TEXT," + // 11: listName
                "\"ADD_TIME\" INTEGER NOT NULL );"); // 12: addTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MUSIC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Music entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSongId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String singer = entity.getSinger();
        if (singer != null) {
            stmt.bindString(4, singer);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(5, album);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
        stmt.bindLong(7, entity.getSize());
        stmt.bindLong(8, entity.getTime());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
        stmt.bindLong(10, entity.getIsCollected());
        stmt.bindLong(11, entity.getCollectTime());
 
        String listName = entity.getListName();
        if (listName != null) {
            stmt.bindString(12, listName);
        }
        stmt.bindLong(13, entity.getAddTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Music entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSongId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String singer = entity.getSinger();
        if (singer != null) {
            stmt.bindString(4, singer);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(5, album);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
        stmt.bindLong(7, entity.getSize());
        stmt.bindLong(8, entity.getTime());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
        stmt.bindLong(10, entity.getIsCollected());
        stmt.bindLong(11, entity.getCollectTime());
 
        String listName = entity.getListName();
        if (listName != null) {
            stmt.bindString(12, listName);
        }
        stmt.bindLong(13, entity.getAddTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Music readEntity(Cursor cursor, int offset) {
        Music entity = new Music( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // songId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // singer
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // album
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.getLong(offset + 6), // size
            cursor.getLong(offset + 7), // time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // name
            cursor.getInt(offset + 9), // isCollected
            cursor.getLong(offset + 10), // collectTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // listName
            cursor.getLong(offset + 12) // addTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Music entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSongId(cursor.getInt(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSinger(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAlbum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSize(cursor.getLong(offset + 6));
        entity.setTime(cursor.getLong(offset + 7));
        entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsCollected(cursor.getInt(offset + 9));
        entity.setCollectTime(cursor.getLong(offset + 10));
        entity.setListName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddTime(cursor.getLong(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Music entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Music entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Music entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
